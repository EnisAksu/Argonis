name: Update Threat Intel Feeds
on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
permissions:
  contents: write
jobs:
  update-feeds:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Create script
      run: |
        cat << 'EOF' > ArgonisIntel/argonisintel_v2.py
        import requests
        import json
        from datetime import datetime
        from pathlib import Path
        import time
        import concurrent.futures

        class ThreatIntelCollector:
            def __init__(self):
                self.data_dir = Path(".")
                
                self.c2_feeds = {
                    "CobaltStrike-TPs": "https://threatview.io/Downloads/High-Confidence-CobaltStrike-C2%20-Feeds.txt",
                    "cyber_crime_tracker": "https://cybercrime-tracker.net/all.php"
                }
                
                self.base_feeds = {
                    "ips": [
                        "https://raw.githubusercontent.com/stamparm/ipsum/master/ipsum.txt",
                        "https://raw.githubusercontent.com/stamparm/blackbook/master/blackbook.txt"
                    ],
                    "urls": [
                        "https://urlhaus.abuse.ch/downloads/text_recent/",
                        "https://openphish.com/feed.txt"
                    ],
                    "hashes": [
                        "https://bazaar.abuse.ch/export/txt/sha256/recent/",
                        "https://bazaar.abuse.ch/export/txt/md5/recent/"
                    ]
                }

            def fetch_feed(self, url, feed_name):
                try:
                    headers = {'User-Agent': 'Mozilla/5.0'}
                    response = requests.get(url, headers=headers, timeout=30)
                    response.raise_for_status()
                    return response.text.splitlines()
                except Exception as e:
                    print(f"Error fetching {feed_name}: {e}")
                    return []

            def collect_feeds(self):
                all_data = {"ips": set(), "urls": set(), "hashes": set()}
                
                for feed_type, urls in self.base_feeds.items():
                    for url in urls:
                        lines = self.fetch_feed(url, feed_type)
                        for line in lines:
                            if line and not line.startswith('#'):
                                all_data[feed_type].add(line.strip())
                
                return all_data

            def generate_feeds(self):
                print("Collecting data from all sources...")
                all_data = self.collect_feeds()
                
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
                
                for feed_type in ['ips', 'urls', 'hashes']:
                    filename = f"argonisintel_{feed_type.upper()}_Feed.txt"
                    print(f"Writing {filename}...")
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(f"# Argonis Intel {feed_type.upper()} Feed\n")
                        f.write(f"# Generated: {timestamp}\n")
                        f.write(f"# Total: {len(all_data[feed_type])}\n\n")
                        for item in sorted(all_data[feed_type]):
                            f.write(f"{item}\n")
                
                return {k: len(v) for k, v in all_data.items()}

        if __name__ == "__main__":
            collector = ThreatIntelCollector()
            print("Starting threat intelligence collection...")
            stats = collector.generate_feeds()
            print("\nCollection complete!")
            for feed_type, count in stats.items():
                print(f"Generated {feed_type} feed with {count} entries")
        EOF

    - name: Run threat intel collector
      run: |
        cd ArgonisIntel
        python argonisintel_v2.py
        
    - name: Commit and push if changes exist
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git config pull.rebase false
        git pull origin main --no-rebase
        git add ArgonisIntel/argonisintel_*_Feed.txt || echo "No files to add"
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update threat intel feeds"
          git push origin main
        fi
